name: Deploy RDS

on:
  push:
    paths:
      - 'backend_rds/**'

permissions:
  id-token: write
  contents: read

env: 
  ECS_CLUSTER: Ecs
  ECS_SERVICE: backendrds
  ECS_TASK_DEFINITION: backend_rds
  ECR_REPOSITORY: backend_rds
  CONTAINER_NAME: backendrds

jobs: 
  deployment:
    name: Deployment
    runs-on: ubuntu-22.04
    environment: develop
    defaults: 
      run:
        working-directory: ./backend_rds
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Logit to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image to ECR
        id: build-image
        uses: docker/build-push-action@v5
        with: 
          push: true
          context: ./backend_rds
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{github.sha}}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          platforms: linux/arm64

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition \
          --region us-east-1 > ../task-definition.json

      - name: Fill in the new image ID in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with: 
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{github.sha}}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
